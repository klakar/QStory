# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QStory
                                 A QGIS plugin
 Build a story upon a Web Map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-08-10
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Klas Karlsson
        email                : klas.karlsson@geosupportsystem.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QByteArray
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .qstory_dockwidget import QStoryDockWidget
import os.path

#------------------------------------------------------------------------
# QStory global variables
qstory_header = []          # Content for the story header div-tag
qstory_body = []            # Content for the story body div-tag
qstory_location = []        # Map location lon,lat string for the story page
qstory_zoom = []            # Map zoom level integer for the story page
current_index = 0           # Currently active page index in the widget

#------------------------------------------------------------------------


class QStory:
    """QGIS Plugin Implementation."""

    
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QStory_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QGIS Story Builder')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QStory')
        self.toolbar.setObjectName(u'QStory')

        #print "** INITIALIZING QStory"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QStory', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qstory/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'QStory'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING QStory"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD QStory"

        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&QGIS Story Builder'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
    
    #--------------------------------------------------------------------------
    # QStory initiate functions
    
    def qstory_initiate(self):
        
        # Use Global variables
        global qstory_header
        global qstory_body
        global qstory_location
        global qstory_zoom
        global current_index
        current_index = 0
        qstory_header.clear()
        qstory_body.clear()
        qstory_location.clear()
        qstory_zoom.clear()

        # Initial Preview "help" text
        help_text = '<h3>QStory</h3><p>Here there will be some simple "Get Started" text...'
        self.dockwidget.web_view.setHtml(help_text)

        # Set first story page
        self.dockwidget.cmb_page.clear()
        self.dockwidget.cmb_page.addItem('1')
        
        qstory_header.insert(0, 'First Page')
        qstory_body.insert(0, '<p>This is a simple story</p><p>Replace <b>this</b> text with your content.</p>')
        qstory_location.insert(0, '14,45')
        qstory_zoom.insert(0, 4)

        # Update the widget
        self.update_page(0)

        

    #--------------------------------------------------------------------------
    # QStory Helper functions

    # Delete the current page and decrease the page numbers
    def delete_page(self):

        # Use Global variables
        global qstory_header
        global qstory_body
        global qstory_location
        global qstory_zoom
        global current_index
        
        # Remove current index from all lists
        qstory_header.pop(current_index)
        qstory_body.pop(current_index)
        qstory_location.pop(current_index)
        qstory_zoom.pop(current_index)

        # Remove last page number from page selector
        self.dockwidget.cmb_page.removeItem(self.dockwidget.cmb_page.count()-1)

        # Update the page form
        if self.dockwidget.cmb_page.count() == current_index:
            current_index -= 1
            if current_index == -1:
                self.qstory_initiate()
        self.update_page(current_index)



    # Add a new page after the current and increase the page numbers
    def add_page(self):

        # Use Global variables
        global qstory_header
        global qstory_body
        global qstory_location
        global qstory_zoom
        
        number_of_pages = self.dockwidget.cmb_page.count()      # How many items in the page combo box
        new_page = current_index + 1                            # Index for the new page is current index + 1
        # Add a page number at the end of the selector list
        new_page_number = number_of_pages + 1
        self.dockwidget.cmb_page.addItem(str(new_page_number))

        # Insert the page in the lists
        qstory_header.insert(new_page, 'New Title')
        qstory_body.insert(new_page, 'New Content')
        qstory_location.insert(new_page, '0,0')
        qstory_zoom.insert(new_page, 6)

        # Show the new page
        self.update_page(new_page)
        

    # Update the current page with the list content for selected page number
    def update_page(self, page_index):
        global current_index
        
        # First save the current content to the lists
        if current_index != page_index:
            qstory_header[current_index] = self.dockwidget.txt_title.text()
            qstory_body[current_index] = self.dockwidget.txt_body.toPlainText()
            qstory_location[current_index] = self.dockwidget.txt_center.text()
            qstory_zoom[current_index] = self.dockwidget.spin_zoom.value()
        
        # Then get and update the form with selected content
        self.dockwidget.txt_title.setText(qstory_header[page_index])
        self.dockwidget.txt_body.setPlainText(qstory_body[page_index])
        self.dockwidget.txt_center.setText(qstory_location[page_index])
        self.dockwidget.cmb_page.setCurrentIndex(page_index)
        self.dockwidget.spin_zoom.setValue(qstory_zoom[page_index])
        current_index = page_index
        self.dockwidget.cmb_page.setCurrentIndex(page_index)
        

        # Update button status
        self.update_status(current_index)

        # Update preview
        self.story_content_tab()

    # Update button and forms active/disable depending on current index
    def update_status(self, page_index):
        if self.dockwidget.cmb_page.count() >= 2:
            self.dockwidget.btn_next.setEnabled(True)
            self.dockwidget.btn_previous.setEnabled(True)
        if current_index == 0:
            self.dockwidget.btn_previous.setEnabled(False)
        if current_index == self.dockwidget.cmb_page.count()-1:
            self.dockwidget.btn_next.setEnabled(False)


    #--------------------------------------------------------------------------
    # Here are "smaller" functions for the QStory dock widget

    def story_generate(self):
        self.dockwidget.txt_body.setPlainText("Det fungerar.")


    def story_content_tab(self):
        if self.dockwidget.tab_widget.currentIndex() == 1:
            html = '<div id="story_header">' + self.dockwidget.txt_title.text() + '</div>'
            html += '<div id="story_body">' + self.dockwidget.txt_body.toPlainText() + '</div>' 
            self.dockwidget.web_view.setHtml(html)

    def get_selected(self):
        self.update_page(self.dockwidget.cmb_page.currentIndex())

    def next_page(self):
        self.update_page(current_index + 1)

    def previous_page(self):
        self.update_page(current_index - 1)

 
    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            global current_index

            self.pluginIsActive = True

            #print "** STARTING QStory"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QStoryDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            # Initiate the dockwidget
            self.qstory_initiate()

            # Catch events when buttons clicked in panel
            # Each must have corresponding def name():
            #self.dockwidget.btn_open.clicked.connect(self.)
            #self.dockwidget.btn_save.clicked.connect(self.)
            self.dockwidget.btn_delete.clicked.connect(self.delete_page)
            self.dockwidget.btn_previous.clicked.connect(self.previous_page)
            self.dockwidget.btn_next.clicked.connect(self.next_page)
            self.dockwidget.btn_new.clicked.connect(self.add_page)
            #self.dockwidget.btn_center.clicked.connect(self.)
            self.dockwidget.btn_generate.clicked.connect(self.story_generate)
            self.dockwidget.tab_widget.currentChanged.connect(self.story_content_tab)
            self.dockwidget.cmb_page.activated[str].connect(self.get_selected)
